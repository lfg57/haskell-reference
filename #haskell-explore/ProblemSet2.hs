{-
===============================================================================
PROGRAM:  "ProblemSet2.hs"
CREATED:  May 27, 2018
UPDATED:  Jan 24, 2020
AUTHOR :  Leon F. Guerrero
-------------------------------------------------------------------------------
Haskell problems using more advanced constructions
=============================================================================-}




{-
=========
PROBLEM 1
-------------------------------------------------------------------------------
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Consider the terms in the Fibonacci sequence whose values do not exceed 
four million and find the sum of the even-valued terms.
-------------------------------------------------------------------------------
# evenFib 4000000   ->   4613730
-------------------------------------------------------------------------------
SOLUTION
- "evenFib n" - @retval: sum of the even-valued Fibonacci sequence terms that 
                         do not exceed n.
-}
evenFib n = sum (seq 1 2 n)
    where
    seq f s n
        | (f+s) > n = []
        | otherwise = if even (f+s) then (f+s):seq s (f+s) n else seq s (f+s) n




{-
=========
PROBLEM 2
-------------------------------------------------------------------------------
Using a list comprehension, find the sum of all numbers from 1 to n that are 
odd multiples of 3 and 7.
-------------------------------------------------------------------------------
# divides 3 21           ->   True
# 3 `divides` 21         ->   True
# sumOddMult3and7 1000   ->   12096
-------------------------------------------------------------------------------
SOLUTION
- helper functions:
  "divides n x"       - @retval: True if x is evenly divisible by n.
- "sumOddMult3and7 n" - @retval: sum of all numbers from 1 to n that are 
                                 odd multiples of 3 and 7.
-}
divides n x = x `mod` n == 0 
sumOddMult3and7 n = sum [x | x <- [1..n], 
                             3 `divides` x, 
                             7 `divides` x, 
                             odd x]




{-
=========
PROBLEM 3
-------------------------------------------------------------------------------
The eight divisors of 24 are 1, 2, 3, 4, 6, 8, 12 and 24. 
The ten numbers not exceeding 100 having exactly eight divisors are 
24, 30, 40, 42, 54, 56, 66, 70, 78, and 88. 
Let f(n) be the count of numbers not exceeding n with exactly eight divisors. 
Given f(100) = 10 and f(1000) = 180, find f(104).
-------------------------------------------------------------------------------
# divisors 24         ->   [1,2,3,4,6,8,12,24]
# eightDivisors 100   ->   [24,30,40,42,54,56,66,70,78,88]
# f 100               ->   10
# f 1000              ->   180
# f 104               ->   12
-------------------------------------------------------------------------------
SOLUTION
- helper functions:
  "divides n x"     - @retval: True if x is evenly divisible by n.
  "divisors n"      - @retval: list containing all divisors of n.
  "eightDivisors n" - @retval: list containing all numbers from 1 to n with 
                               exactly 8 divisors.
- "f n"             - @retval: count of numbers not exceeding n that have 
                               exactly 8 divisors.
-}
-- divisors n = [x | x <- [1..n], x `divides` n]
-- eightDivisors n = [x | x <- [1..n], length (divisors x) == 8]
f n = length (eightDivisors n)
      where
      divides n x = x `mod` n == 0
      divisors n = [x | x <- [1..n], x `divides` n]
      eightDivisors n = [x | x <- [1..n], length (divisors x) == 8]



{-
==========
PLAYGROUND
-------------------------------------------------------------------------------
--1
evenFib 4000000

--2
divides 3 21
3 `divides` 21
sumOddMult3and7 1000

--3
divisors 24
eightDivisors 100
f 100
f 1000
f 104
------------------------------------------------------------------------------}